README
Server code done by - KYUNGSEOK RYOO
Client code done by Shivank Vishvanathan

Compilation instructions:
make all //builds the executables required to compile both the server and client
make clean //cleans all the executable and binaries from the respective directory
make echos //initializes the server on port 8080 by default.
make echos PORT=[int port_number] //If server has to be initialized on port_number specified by user
make echo //initializes client on port 8080 and IP address 127.0.0.1 by default
make echo SERVER_ADDR=[IP_ADDR] PORT=[int port_number] //If client has to be initialized on IP address and port input by the user.

Overview
The project is a Echo Server with 3 functions
1. Accepts messages from the client over TCP
2. Echos back the received messages
3. Handles multiple clients by forking

Architecture
-Server implementation
    Implemented using C.
    Uses TCP sockets to communicate with clients. 
    Each client connection is handled separately using fork()
    Server listens on an ipv4 binging to INADDR_ANY to accept connections. 
-Client Implementation
    Implemented using C.
    Makes use of standard socket libraries and standard c libraries
    as well as string libraries. Input and output buffer are created to handlle
    data being sent and written. Main function is used to create a socket and 
    initialize and connect to server
    Writen function is used for writing to the server as well as reading from server,
    essentially combining the writen and readline functions into one. Errors are also
    handled in this function
    error_sys function is used to print an error message and exit with -1.
    
-Client-Server interaction
    Client connects to the server and sends lines of text.
    Server reads the lines and sends them back to the client. 

Server process flow 
+----------------------+
|   Socket Creation    |
+----------------------+
           |
+----------------------+
|       Binding        |
+----------------------+
           |
+----------------------+
|      Listening       |
+----------------------+
           |
+-------------------------------+
|   Accepting Client Connection |
+-------------------------------+
           |
+------------------------------+
|   Forking Child Process      |
+------------------------------+
           |
+-------------------------------+
| Handling Client Communication |
+-------------------------------+
           |
+----------------------+
|    Closing Sockets   |
+----------------------+


Client Process Flow
+----------------------+
|   Socket Creation    |
+----------------------+
           |
+----------------------+
|       Connecting
|       to Server
+----------------------+
           |
+----------------------+
|   Writing to server  |
+----------------------+
           |
+-------------------------------+
|   Reading echo from Server    |
+-------------------------------+
           |
+------------------------------+
| Disconnect if error detected |
+------------------------------+
           
Usage
1. Compile the server
    gcc -o MP1_server.c

2. Running the Server
    ./MP1_server <port>

Requirements 
- Linux Environment
- GCC Compiler
