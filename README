README
Server code done by - KYUNGSEOK RYOO
Client code done by Shivank Vishvanathan

Overview
The project is a Echo Server with 3 functions
1. Accepts messages from the client over TCP
2. Echos back the received messages
3. Handles multiple clients by forking
4. Checks for errors in communication and handles them

Architecture
-Server implementation
    Implemented using C.
    Uses TCP sockets to communicate with clients. 
    Each client connection is handled separately using fork()
    Server listens on an ipv4 binging to INADDR_ANY to accept connections. 
-Client Implementation
    Implemented using C.
    Makes use of standard socket libraries and standard c libraries
    as well as string libraries. Input and output buffer are created to handlle
    data being sent and written. Main function is used to create a socket and 
    initialize and connect to server
    Writen function is used for writing to the server as well as reading from server,
    essentially combining the writen and readline functions into one. Errors are also
    handled in this function
    error_sys function is used to print an error message and exit with -1.
    
-Client-Server interaction
    Client connects to the server and sends lines of text.
    Server reads the lines and sends them back to the client. 
    No of bytes sent and received are printed on the client side,
    while the process id of child and parent are printed on the 
    server.

Server process flow 
+----------------------+
|   Socket Creation    |
+----------------------+
           |
+----------------------+
|       Binding        |
+----------------------+
           |
+----------------------+
|      Listening       |
+----------------------+
           |
+-------------------------------+
|   Accepting Client Connection |
+-------------------------------+
           |
+------------------------------+
|   Forking Child Process      |
+------------------------------+
           |
+-------------------------------+
| Handling Client Communication |
+-------------------------------+
           |
+----------------------+
|    Closing Sockets   |
+----------------------+


Client Process Flow
+----------------------+
|   Socket Creation    |
+----------------------+
           |
+----------------------+
|       Connecting
|       to Server
+----------------------+
           |
+----------------------+
|   Writing to server  |
+----------------------+
           |
+-------------------------------+
|   Reading echo from Server    |
+-------------------------------+
           |
+------------------------------+
| Disconnect if error detected |
+------------------------------+

Error Handling:
We have tried to implement as many error handlers as possible
-The error_sys function is used to print error messages depending on the error and exit with -1
-The EINTR error is checked twice in the Writen() function, once for write to server and once for
read from server.
-Socket creation failure, connection failure and wrong command line inputs are also checked
-Entering ctrl-D and disconnection of the server will all lead to EOF(End of File)
error and exit with a -1.
-Pressing the enter key without any text at the client will lead to EOF and client will exit.

Usage
Compilation instructions:
1)make all //builds the executables required to compile both the server and client
2)make clean //cleans all the executable and binaries from the respective directory
3)make echos //initializes the server on port 8080 by default.
4)make echos PORT=[int port_number] //If server has to be initialized on port_number specified by user
5)make echo //initializes client on port 8080 and IP address 127.0.0.1 by default
6)make echo SERVER_ADDR=[IP_ADDR] PORT=[int port_number] //If client has to be initialized on IP address and port input by the user.

For code fully generated by chatgpt:
1)./server 127.0.0.1 8080 // initialize server
2),/client 127.0.0.1 8080 // initialize client
Unfortunately the makefile did not really work with the code we generated completely using chatgpt



Requirements 
- Linux Environment
- GCC Compiler
-Ensure all files are in the same directory to avoid complications/errors
